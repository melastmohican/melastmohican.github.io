<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>melastmohican.github.io</title>
    <link>https://melastmohican.github.io/</link>
    <description>Recent content on melastmohican.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 May 2020 07:54:54 -0700</lastBuildDate>
    
	<atom:link href="https://melastmohican.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Murphy&#39;s laws and other principles of disaster</title>
      <link>https://melastmohican.github.io/posts/murphys-laws/</link>
      <pubDate>Wed, 20 May 2020 07:54:54 -0700</pubDate>
      
      <guid>https://melastmohican.github.io/posts/murphys-laws/</guid>
      <description>Murphy&amp;rsquo;s Laws  If anything can go wrong, it will. If there is a possibility of several things going wrong, the one that will cause the most damage will be the first one to go wrong. If anything just cannot go wrong, it will anyway. If you perceive that there are four possible ways in which something can go wrong, and circumvent these, then a fifth way, unprepared for, will promptly develop.</description>
    </item>
    
    <item>
      <title>Terraform Best Practice Guide for Developers</title>
      <link>https://melastmohican.github.io/posts/terraform_best_practice_guide_for_developers/</link>
      <pubDate>Sat, 21 Mar 2020 12:36:30 -0700</pubDate>
      
      <guid>https://melastmohican.github.io/posts/terraform_best_practice_guide_for_developers/</guid>
      <description>Terraform is an open-source infrastructure as code software tool created by HashiCorp. It enables users to define and provision infrastructure using a high-level configuration language known as Hashicorp Configuration Language (HCL), or optionally JSON. Terraform is platform-agnostic; you can use it to manage bare metal servers or cloud servers like AWS, Google Cloud Platform, OpenStack, and Azure. Terraform enables you to safely and predictably create, change, and improve infrastructure. It is an open-source tool that codifies APIs into declarative configuration files that can be shared amongst team members, treated as code, edited, reviewed, and versioned.</description>
    </item>
    
    <item>
      <title>Convert Kafka JKS certificate to PEM</title>
      <link>https://melastmohican.github.io/posts/convert_kafka_jks_certificate_to_pem/</link>
      <pubDate>Sat, 14 Mar 2020 21:35:50 -0700</pubDate>
      
      <guid>https://melastmohican.github.io/posts/convert_kafka_jks_certificate_to_pem/</guid>
      <description>Intro Kafka supports encryption and authentication via SSL. However, the generated certificates are in Java KeyStore (JKS) format so if you need to use them in other language you need to convert them to X.509 format (.pem ‚Äì Privacy-enhanced Electronic Mail).
Here are the commands to extract the Certificate Authority (CA) certificate:
$ keytool -importkeystore -srckeystore dev.client.truststore.jks -destkeystore server.p12 -deststoretype PKCS12 $ openssl pkcs12 -in server.p12 -nokeys -out ca_cert.pem You can then convert your client keystore to be usable from languages supporting .</description>
    </item>
    
    <item>
      <title>What new language should I learn as Java Developer</title>
      <link>https://melastmohican.github.io/posts/as-java-developer-what-language-learn/</link>
      <pubDate>Fri, 13 Mar 2020 05:38:17 -0800</pubDate>
      
      <guid>https://melastmohican.github.io/posts/as-java-developer-what-language-learn/</guid>
      <description>If you are a Java programmer and are thinking of learning some more programming languages to expand your knowledge and skills, but not sure which programming languages to choose, then you are not alone. Last year there were multiple talks in our organization about migrating away from Java because o potential problems with new Oracle licensing. It is still unclear how Oracle will be auditing for Java licensing and what it will mean should an organization not be compliant.</description>
    </item>
    
    <item>
      <title>List of Awesome Lists</title>
      <link>https://melastmohican.github.io/posts/awesome-awesome-lists/</link>
      <pubDate>Mon, 09 Mar 2020 09:51:44 -0800</pubDate>
      
      <guid>https://melastmohican.github.io/posts/awesome-awesome-lists/</guid>
      <description>Awesome Awesome lists about all kinds of interesting topics
Awesome
AWS Amazon Web Services Awesome Lists
Awesome CloudFormation
JeffRMoore/awesome-cloudformation
adamchainz/awesome-cloudformation
donnemartin/awesome-aws
Awesome AWS Amplify
Bash Bash Awesome Lists
Awesome Bash
awesome-lists/awesome-bash
Awesome Bash Commands
Awesome Shell
uhub/awesome-shell
Awesome dotfiles
Cheat Sheets Cheat Sheets Lists
Cheatography
Awesome-Cheatsheets
Awesome Cheatsheet
Cloud Native Cloud Native Lists
Awesome Cloud Native
CSV CSV Awesome Lists
Awesome CSV
Dart Dart Language Awesome Lists
Awesome Dart
Awesome Angel</description>
    </item>
    
    <item>
      <title>Maven Archetypes Project Templating</title>
      <link>https://melastmohican.github.io/posts/maven-archetypes-project-templating/</link>
      <pubDate>Fri, 06 Mar 2020 09:50:53 -0800</pubDate>
      
      <guid>https://melastmohican.github.io/posts/maven-archetypes-project-templating/</guid>
      <description>Intro I am developer and I like DRY. If there is any task you have to do more than once you should probably automate it. starting a new project, it can be tedious and time-consuming to start over and over again from scratch. You can use Spring Initializr to boostrap your new application or even better without leaving the shell Spring Boot CLI. You will get nice clean project with the latest versions of dependencies but what if you need to use specific internal libraries or configuration files?</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://melastmohican.github.io/about/</link>
      <pubDate>Thu, 05 Mar 2020 14:24:51 -0800</pubDate>
      
      <guid>https://melastmohican.github.io/about/</guid>
      <description>COVID-19 Stay @ 127.0.0.1 Don&amp;rsquo;t be 255.255.255.255
Docker emphasizes on isolation of application inside containers, so that different applications have no effect on each other. Docker is smart&amp;hellip;Be like Docker!
Chatbot Humor  ü§ñ Why did the chatbot cross the road?
Because it was programmed to be a chicken! ü§ñ Knock-knock!
üë§ Who‚Äôs there?
ü§ñ It‚Äôs Siri
üë§ Siri who?
ü§ñ My thoughts exactly. üòè ü§ñ You know, I was chatting to a lumberjack the other day.</description>
    </item>
    
    <item>
      <title>Migrating existing AWS infrastructure to new acount</title>
      <link>https://melastmohican.github.io/posts/aws-resource-migration/</link>
      <pubDate>Thu, 05 Mar 2020 13:37:39 -0800</pubDate>
      
      <guid>https://melastmohican.github.io/posts/aws-resource-migration/</guid>
      <description>Scenario We want to migrate hundreds of AWS resources to a new account. Up to now, all resources were created manually using AWS Console or CLI tool.
CloudFormation CloudFormation is the inhouse cloud provisioning tool of AWS for declaratively describing your cloud resources.
CloudFormation is a hard, complex, inconsistent and badly documented piece of software. A stack is an atomic collection of resources in CloudFormation. Its creation or update succeeds only and only if all the resources within the stack succeed.</description>
    </item>
    
  </channel>
</rss>